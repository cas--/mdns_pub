//! # DBus interface proxy for: `org.freedesktop.Avahi.EntryGroup`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `org.freedesktop.Avahi.EntryGroup.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.freedesktop.Avahi.EntryGroup", assume_defaults = true)]
trait EntryGroup {
    /// AddAddress method
    fn add_address(
        &self,
        interface: i32,
        protocol: i32,
        flags: u32,
        name: &str,
        address: &str,
    ) -> zbus::Result<()>;

    /// AddRecord method
    fn add_record(
        &self,
        interface: i32,
        protocol: i32,
        flags: u32,
        name: &str,
        clazz: u16,
        type_: u16,
        ttl: u32,
        rdata: &[u8],
    ) -> zbus::Result<()>;

    /// AddService method
    fn add_service(
        &self,
        interface: i32,
        protocol: i32,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        host: &str,
        port: u16,
        txt: &[&[u8]],
    ) -> zbus::Result<()>;

    /// AddServiceSubtype method
    fn add_service_subtype(
        &self,
        interface: i32,
        protocol: i32,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        subtype: &str,
    ) -> zbus::Result<()>;

    /// Commit method
    fn commit(&self) -> zbus::Result<()>;

    /// Free method
    fn free(&self) -> zbus::Result<()>;

    /// GetState method
    fn get_state(&self) -> zbus::Result<i32>;

    /// IsEmpty method
    fn is_empty(&self) -> zbus::Result<bool>;

    /// Reset method
    fn reset(&self) -> zbus::Result<()>;

    /// UpdateServiceTxt method
    fn update_service_txt(
        &self,
        interface: i32,
        protocol: i32,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        txt: &[&[u8]],
    ) -> zbus::Result<()>;

    /// StateChanged signal
    #[dbus_proxy(signal)]
    fn state_changed(&self, state: i32, error: &str) -> zbus::Result<()>;
}
