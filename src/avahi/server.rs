//! # DBus interface proxy for: `org.freedesktop.Avahi.Server`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `Interface '/' from service 'org.freedesktop.Avahi' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.freedesktop.Avahi.Server",
    default_service = "org.freedesktop.Avahi",
    default_path = "/"
)]
trait Server {
    /// AddressResolverNew method
    fn address_resolver_new(
        &self,
        interface: i32,
        protocol: i32,
        address: &str,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// DomainBrowserNew method
    fn domain_browser_new(
        &self,
        interface: i32,
        protocol: i32,
        domain: &str,
        btype: i32,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// EntryGroupNew method
    fn entry_group_new(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetAPIVersion method
    #[dbus_proxy(name = "GetAPIVersion")]
    fn get_apiversion(&self) -> zbus::Result<u32>;

    /// GetAlternativeHostName method
    fn get_alternative_host_name(&self, name: &str) -> zbus::Result<String>;

    /// GetAlternativeServiceName method
    fn get_alternative_service_name(&self, name: &str) -> zbus::Result<String>;

    /// GetDomainName method
    fn get_domain_name(&self) -> zbus::Result<String>;

    /// GetHostName method
    fn get_host_name(&self) -> zbus::Result<String>;

    /// GetHostNameFqdn method
    fn get_host_name_fqdn(&self) -> zbus::Result<String>;

    /// GetLocalServiceCookie method
    fn get_local_service_cookie(&self) -> zbus::Result<u32>;

    /// GetNetworkInterfaceIndexByName method
    fn get_network_interface_index_by_name(&self, name: &str) -> zbus::Result<i32>;

    /// GetNetworkInterfaceNameByIndex method
    fn get_network_interface_name_by_index(&self, index: i32) -> zbus::Result<String>;

    /// GetState method
    fn get_state(&self) -> zbus::Result<i32>;

    /// GetVersionString method
    fn get_version_string(&self) -> zbus::Result<String>;

    /// HostNameResolverNew method
    fn host_name_resolver_new(
        &self,
        interface: i32,
        protocol: i32,
        name: &str,
        aprotocol: i32,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// IsNSSSupportAvailable method
    #[dbus_proxy(name = "IsNSSSupportAvailable")]
    fn is_nsssupport_available(&self) -> zbus::Result<bool>;

    /// RecordBrowserNew method
    fn record_browser_new(
        &self,
        interface: i32,
        protocol: i32,
        name: &str,
        clazz: u16,
        type_: u16,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ResolveAddress method
    fn resolve_address(
        &self,
        interface: i32,
        protocol: i32,
        address: &str,
        flags: u32,
    ) -> zbus::Result<(i32, i32, i32, String, String, u32)>;

    /// ResolveHostName method
    fn resolve_host_name(
        &self,
        interface: i32,
        protocol: i32,
        name: &str,
        aprotocol: i32,
        flags: u32,
    ) -> zbus::Result<(i32, i32, String, i32, String, u32)>;

    /// ResolveService method
    fn resolve_service(
        &self,
        interface: i32,
        protocol: i32,
        name: &str,
        type_: &str,
        domain: &str,
        aprotocol: i32,
        flags: u32,
    ) -> zbus::Result<(
        i32,
        i32,
        String,
        String,
        String,
        String,
        i32,
        String,
        u16,
        Vec<Vec<u8>>,
        u32,
    )>;

    /// ServiceBrowserNew method
    fn service_browser_new(
        &self,
        interface: i32,
        protocol: i32,
        type_: &str,
        domain: &str,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ServiceResolverNew method
    fn service_resolver_new(
        &self,
        interface: i32,
        protocol: i32,
        name: &str,
        type_: &str,
        domain: &str,
        aprotocol: i32,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ServiceTypeBrowserNew method
    fn service_type_browser_new(
        &self,
        interface: i32,
        protocol: i32,
        domain: &str,
        flags: u32,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// SetHostName method
    fn set_host_name(&self, name: &str) -> zbus::Result<()>;

    /// StateChanged signal
    #[dbus_proxy(signal)]
    fn state_changed(&self, state: i32, error: &str) -> zbus::Result<()>;
}
